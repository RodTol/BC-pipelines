    pipeline {
        agent { 
            node {
                label 'docker'
                }
        }
        parameters {
            /*The idea is to set as parameter the path to the JSON and not the actual JSON. 
            I assumed that the starting directory is the pipeline one*/
            string(name: 'configFilePath', defaultValue: '/u/area/jenkins_onpexp/BC-pipelines/basecalling-pipeline/config.json', description: 'Path to the config JSON file')
        }
        triggers {
            pollSCM 'H * * * *'
        }
        stages {
            stage('Cleanup tmp dir') {
                steps {
                    withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                        /*Logs dir cleanup*/
                        sh '''
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                cd /u/area/jenkins_onpexp/scratch/jenkins_logs
                                rm -rf tmp
                                mkdir tmp
                            '    
                        '''
                        /*Output dir cleanup*/
                        sh '''
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                cd /u/area/jenkins_onpexp/scratch/BC-pipeline_output_test/
                                rm -rf tmp
                                mkdir tmp
                                mkdir tmp/pass
                                mkdir tmp/fail
                            '    
                        '''
                        
                        /*Input dir cleanup*/
                        sh '''
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                cd /u/area/jenkins_onpexp/scratch/10G_dataset_POD5
                                rm -rf ASSIGNED_*
                                rm -rf FAILED_*
                                rm -rf TMP_*
                            '
                        '''
                    }
                }
            }   
            stage('Pull project repository') {
                steps {
                    script {
                        withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                            sh '''
                                ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                    echo "**********Running ''git pull'' in BC-pipelines directory**********"
                                    cd BC-pipelines && git pull
                                '
                            '''
                        }
                    }    
                }
            }
            stage('Generate setup based on configuration file') {
                steps {
                    withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                        /**
                            Ricorda che ogni sh è una shell a sè, e anche ogni ssh.
                            Per usare quella della sh invece di quella della ssh basta che le metto
                            fra single quotes
                        */

                        /* The idea is that by reading the json, I will create a dir with the 3
                        python packages with all the information needed. For BCManager and BCProcessor
                        we can just make a copy, but for the BCConfiguration, I need it to write it down*/      
                        sh '''
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '                          
                                cd BC-pipelines/basecalling-pipeline
                                echo "-------Basecalling parameters------"
                                python configuration.py '${configFilePath}'
                                echo "------File list------"
                                ls -lrt
                            '
                        '''
                    }    
                }
            } 
            stage('Start basecalling run') {
                steps {
                    withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                        sh '''
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                echo "**********Launching the basecalling**********"
                                cd ~/BC-pipelines/basecalling-pipeline
                                sbatch ~/BC-pipelines/BC_scripts/script_resources.sh '${configFilePath}'> jobid.txt
                                job_id=$(grep -oE '[0-9]+' jobid.txt)
                                echo "Job ID: $job_id"
                            '    
                        '''
                    }
                }
            }
            stage('Wait for Basecalling to end') {
                steps {
                    withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                        sh '''
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                cd ~/BC-pipelines/basecalling-pipeline
                                job_id=$(grep -oE '[0-9]+' jobid.txt)
                                echo "Job ID: $job_id"
                                ~/BC-pipelines/BC_scripts/wait.sh $job_id
                            '    
                        '''
                    }
                }
            }
            stage('Create Final file') {
                steps {
                    withCredentials([sshUserPrivateKey(credentialsId: 'orfeo_jenkins_onpexp', keyFileVariable: 'SSH_ONPEXP_KEY', passphraseVariable: '', usernameVariable: 'SSH_ONPEXP_USER')]) {
                        sh '''
                            ssh -i ${SSH_ONPEXP_KEY} ${SSH_ONPEXP_USER}@10.128.2.80 '
                                echo "Final file"
                            '    
                        '''
                    }
                }
            }
            stage('Send Report to User') {
                steps {
                    sh '''
                    echo "invio il report finale allo user"
                    cd basecalling-pipeline
                    #bash telegram_bot.sh
                    '''
                }
            }
        }
    }
